name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi

    - name: Run Black code formatter check
      run: |
        poetry run black --check --diff scraper/ loader/ tests/

    - name: Run flake8 linting
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        poetry run flake8 scraper/ loader/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        poetry run flake8 scraper/ loader/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi

    - name: Install Playwright browsers
      run: |
        poetry run playwright install chromium
        poetry run playwright install-deps chromium

    - name: Run unit tests
      run: |
        poetry run pytest tests/ -v --tb=short --junit-xml=test-results.xml

    - name: Upload test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: test-results.xml
        reporter: java-junit

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test only)
      run: |
        docker build -t s-kaupat-scraper:test .

    - name: Test Docker image
      run: |
        # Run a quick test to ensure the container starts
        docker run --rm s-kaupat-scraper:test python -c "import server; print('✅ Server imports successfully')"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'

  api-contract:
    name: API Contract Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi

    - name: Test API contract
      run: |
        # Test that FastAPI app can start and has expected endpoints
        poetry run python -c "
        import server
        app = server.app
        
        # Check expected routes exist
        routes = [route.path for route in app.routes if hasattr(route, 'path')]
        expected = ['/', '/health', '/stores', '/store-types', '/bigquery/load', '/bigquery/query', '/bigquery/info']
        
        for endpoint in expected:
            assert endpoint in routes, f'Missing endpoint: {endpoint}'
            
        print('✅ All expected API endpoints are present')
        "
