name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-north1
  SERVICE_NAME: s-kaupat-scraper

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi

    - name: Run full test suite
      run: |
        poetry run playwright install chromium
        poetry run pytest tests/ -v

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Build and push release image
      run: |
        # Configure docker
        gcloud auth configure-docker
        
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Build with version tags
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$VERSION .
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest .
        
        # Push images
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$VERSION
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Deploy release to production
      run: |
        # Set project
        gcloud config set project $PROJECT_ID
        
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Deploy the release
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$VERSION \
          --region $REGION \
          --service-account s-kaupat-scraper@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars "GOOGLE_CLOUD_PROJECT=$PROJECT_ID,BIGQUERY_DATASET_ID=s_kaupat,BIGQUERY_TABLE_ID=stores,BIGQUERY_LOCATION=$REGION" \
          --cpu 2 \
          --memory 2Gi \
          --timeout 300 \
          --concurrency 10 \
          --min-instances 0 \
          --max-instances 10 \
          --allow-unauthenticated \
          --tag $VERSION

    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Test production deployment
      run: |
        # Wait for deployment
        sleep 30
        
        # Test endpoints
        curl -f ${{ steps.get-url.outputs.SERVICE_URL }}/health
        curl -f ${{ steps.get-url.outputs.SERVICE_URL }}/store-types

    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          # Generate changelog from commits
          CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
        else
          CHANGELOG="- Initial release"
        fi
        
        # Save changelog to file
        echo "$CHANGELOG" > CHANGELOG.md
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## 🚀 S-kaupat Scraper Release ${{ github.ref }}
          
          ### 🌐 Deployment
          - **Service URL**: ${{ steps.get-url.outputs.SERVICE_URL }}
          - **API Documentation**: ${{ steps.get-url.outputs.SERVICE_URL }}/docs
          - **Health Check**: ${{ steps.get-url.outputs.SERVICE_URL }}/health
          
          ### 📋 Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### 🐳 Docker Images
          - `gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.ref }}`
          - `gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest`
          
          ### 📊 Metrics
          - **Build time**: ${{ github.run_number }}
          - **Commit**: ${{ github.sha }}
          - **Released at**: $(date)
        draft: false
        prerelease: false
